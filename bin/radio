#!/bin/bash

BINDIR="$( cd "$(dirname "$0")" ; pwd -P )"
MAINDIR=$(realpath $BINDIR/..)
ETCDIR=$MAINDIR/etc
LOGDIR=~/log/radio
ICONDIR=$MAINDIR/share/icons
CFG_FILE=$ETCDIR/radio.cfg

# filtered configs
CFG=`sed '/^[[:blank:]]*#/d;s/#.*//;/^$/d' $CFG_FILE`
CFG_ROOT=`sed '/^[[:blank:]]*#/d;s/#.*//;/^$/d;/^{root}/!d' $CFG_FILE`
CFG_GROUP=`sed '/^[[:blank:]]*#/d;s/#.*//;/^$/d;/^{root}/d' $CFG_FILE`

do_log () {
  LOGF=$1
  while true
  do
    read -d ';'
    if [[ ${REPLY} =~ " finished." ]]; then
      # on getting
      #[0:02] Decoding of lush-128.mp3 finished.
      echo > /tmp/streamurl; echo > /tmp/streamtitle; echo "exited..."
      break;
    fi
    if [ ! -z "$REPLY" ]; then

      if [[ -z $ICY_NAME ]]; then
        ICY_NAME=$(echo "$REPLY"| grep ICY-NAME|sed s/ICY-NAME:\//g|sed s/\'$//g);
        if [[ -n $ICY_NAME ]]; then echo; echo $ICY_NAME; fi
      fi
      if [[ -z $ICY_URL ]]; then
        ICY_URL=$(echo "$REPLY"| grep ICY-URL|sed s/ICY-URL:\//g|sed s/\'$//g);
        if [[ -n $ICY_URL ]]; then echo $ICY_URL; echo; fi
      fi

      TRACK=$(echo "$REPLY"| grep ICY-META|sed s/ICY-META:\ StreamTitle=\'//g|sed s/\'$//g);
      if [[ -n $TRACK ]]; then
        (notify-send -i $2 "$TRACK" && TIM=`date +%H:%M` && DAT=`date +%Y%m%d` && echo $TRACK && echo $TRACK > /tmp/streamtitle && echo "$TIM $TRACK" >> "$LOGF-$DAT.log")
      fi
      sleep 1;
    fi
  done
}

play () {
  echo $1 > /tmp/streamurl
  echo $2
  mpg123 -C "$1" &> /dev/stdout | do_log "$LOGDIR/$3" "$4"
}

get_group () {
  echo "$1" | cut -d "|" -f 1
}

get_channel () {
  echo "$1" | cut -d "|" -f 2
}

get_stream () {
  STREAM=`echo "$1" | cut -d "|" -f 3`
  if [[ $STREAM =~ ^\{somafm! ]]; then
    STR=`echo "$STREAM" | sed 's/{//;s/}//;'`
    CHANNEL=`echo "$STR" | cut -d "!" -f 2`
    BITRATE=`echo "$STR" | cut -d "!" -f 3`
    CHANNELN=$(( ( RANDOM % 4 )  + 1 ))
    STREAM="http://ice${CHANNELN}.somafm.com/${CHANNEL}-${BITRATE}-mp3"
  fi
  echo "$STREAM"
  }

get_name () {
  echo "$1" | cut -d "|" -f 4
}

get_icon () {
  echo "$1" | cut -d "|" -f 5
}

get_log_dir () {
  if [ "$1" = "{root}" ]; then
    LDIR="$2"
  else
    if [ "$2" = "{empty}" ]; then
      LDIR="$1"
    else
      LDIR="$1/$2"
    fi
  fi
  echo "$LDIR"
}

get_log_file_name () {
  echo "$(get_log_dir "$1" "$2")/online"
}

play_channel () {
  RGRP=$(get_group "$1")
  RCNL=$(get_channel "$1")
  LOGFILENAME=$(get_log_file_name "$RGRP" "$RCNL")
  STREAM=$(get_stream "$1")
  NAME=$(get_name "$1")
  ICON=$(get_icon "$1")

  play "$STREAM" "$NAME" "$LOGFILENAME" "$ICONDIR/$ICON"
}

do_before () {
  config_check
  check_log_dirs
  remove_old_logs 60
}

do_random () {
  do_before
  CHANNEL=`echo "$CFG" | sed "/|{group}|/d" | shuf -n 1`
  play_channel "$CHANNEL"
}

do_radio_group_channel () {
  CHANNEL=`echo "$CFG" | sed -n "/^$1|$2|/p"`
  if [[ -z $CHANNEL ]]; then
    error
  else
    play_channel "$CHANNEL"
  fi
}

do_radio () {
  do_before
  # check how much args received
  if [[ -z $2 ]]; then
    # try to play root channel
    CHANNEL=`echo "$CFG" | sed -n "/^{root}|$1|/p"`
    if [[ -z $CHANNEL ]]; then
      # there isn't a root channel
      # try to play group with empty channel
      CHANNEL=`echo "$CFG" | sed -n "/^$1|{empty}|/p"`
      if [[ -z $CHANNEL ]]; then
        #there isn't a group with empty channel
        error
      fi
    fi
    play_channel "$CHANNEL"
  else
    # play radio channel
    do_radio_group_channel $1 $2
  fi
}

config_check () {
  if [[ -n `echo "$CFG" | sed -n '/^$/='` ]]; then
    echo -e "\nThere is an empty lines in config file\n"
    exit
  fi

  if [[ -n `echo "$CFG" | sed -e '/^[^|]*|[^|]*|[^|]*|[^|]*|[^|]*$/d'` ]]; then
    echo -e "\nThere is an error in config file\n"
    exit
  fi
}

check_log_dir_channel () {
  DIR=$(get_log_dir "$(get_group "$CHANNEL")" "$(get_channel "$CHANNEL")")
  [ -d $LOGDIR/$DIR ] || mkdir -p $LOGDIR/$DIR
}

check_log_dirs () {
  [ -d $LOGDIR ] || mkdir -p $LOGDIR
  echo "$CFG" | sed -n "/^.*|{group}/!p" | while read CHANNEL ; do
    check_log_dir_channel "$CHANNEL"
  done
}

remove_old_logs () {
  if [[ $1 =~ ^-?[0-9]+$ ]]; then
    echo -e "removing log files older than $1 days\n"
    find $LOGDIR -mtime +$1 -type f -delete
  else
    error
  fi
}

print_header () {
  printf '%.s-' {1..32}
  echo -e " $1 $2\n"
}

help_single () {
  echo "$CFG" | sed -n '/^{root}/p' | awk -F '|' '{print $2"      \t\t"$4}'
}

help_group () {
  echo "$CFG" | sed -n "/^$1|{group}/p" | awk -F '|' '{print $1"      \t\t"$4}'
  echo "$CFG" | sed -n "/^$1|{group}/d;/^$1/p" | awk -F '|' '{print "\t"$2"      \t"$4}'
}

help_groups () {
  for GRP in $(echo "$CFG_GROUP" | awk -F '|' '{print $1}' | uniq)
  do
    help_group $GRP
  done
}

do_help () {
  echo -e "Shell for radio\n\nusage:\tradio [cmd]\n\tradio [channel]\n\tradio [group] [channel]\n\nlist of commands:\n"
  echo -e "\tconfig check\tcheck config file"
  echo -e "\tconfig show\tshow detailed config"
  echo -e "\thelp\t\tshow this help"
  echo -e "\tlog del [days]\tremove log files older than [days] days\n\t\t\t(script auto removes log files older than 60 days)\n"
  echo -e "list of supported radio groups and channels:\nradio\tchannel\t\tdescription\n"
  help_single
  help_groups
  echo -e "\t{empty}\t\trandom channel selection"
  echo -e "~\t\t\trandom radio and channel selection"
  echo -e "\nterminal control keys:\n\n [+]\t\tvolume up\n [-]\t\tvolume down\n [s] or [ ]\tinterrupt/restart playback (i.e. 'pause')\n [q]\t\tquit\n"
}

print_config_channel () {
  echo -e "\n\tgroup:\t"$(get_group "$1")
  echo -e "\tchnl:\t"$(get_channel "$1")
  echo -e "\tstream:\t"$(get_stream "$1")
  echo -e "\tname:\t"$(get_name "$1")
  echo -e "\ticon:\t"$(get_icon "$1")
  echo -e "\tlogdir:\t"$(get_log_dir $(get_group "$1") $(get_channel "$1"))
  echo -e "\tlog:\t"$(get_log_file_name $(get_group "$1") $(get_channel "$1"))"\n"
}

print_config_single () {
  print_header "root" "start"
  echo "$CFG_ROOT" | while read CHANNEL ; do
    echo "$CHANNEL" | awk -F '|' '{print $2"      \t"$4}'
    print_config_channel "$CHANNEL"
  done
  print_header "root" "end"
}

print_config_group () {
  print_header "group" "start"
  echo "$CFG" | sed -n "/^$1|{group}/p" | awk -F '|' '{print $1"      \t"$4}'
  echo
  echo "$CFG" | sed -n "/^$1|{group}/d;/^$1/p" | while read CHANNEL ; do
    echo "$CHANNEL" | awk -F '|' '{print $2"      \t"$4}'
    print_config_channel "$CHANNEL"
  done
  print_header "group" "end"
}

print_config_groups () {
  for GRP in $(echo "$CFG_GROUP" | awk -F '|' '{print $1}' | uniq)
  do
    print_config_group $GRP
  done
}

config_show () {
  print_config_single
  print_config_groups
}

error () {
  echo -e "\nYou made some mistake in program usage... let me briefly remind you:\n"
  do_help
  exit
}

do_main () {
  if [[ -z $1 ]]; then
    do_help      # without options
  else
    case $1 in
      ~)
        do_random
        ;;
      help)
        do_help
        ;;
      config)
        case $2 in
          check)
            config_check
            echo -e "\nok\n"
            ;;
          show)
            config_show
            ;;
          *)
            error
            ;;
        esac
        ;;
      log)
        case $2 in
          del)
            remove_old_logs $3
            ;;
          *)
            error
            ;;
        esac
        ;;
      *)
        do_radio $1 $2
        ;;
    esac
  fi
}

do_main $1 $2 $3
